// Generated by CoffeeScript 1.9.3
var MySound,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

MySound = (function() {
  MySound.prototype.CONFIG = {
    filename: './snobbery.ogg',
    fps: 60,
    fftSize: 128,
    startSec: 2
  };

  MySound.prototype.isLoaded = false;

  MySound.prototype.isReady = false;

  MySound.prototype.isPlaying = false;

  MySound.prototype.canvas = null;

  MySound.prototype.manager = null;

  MySound.prototype.startTime = null;

  MySound.prototype.widthArray = null;

  MySound.prototype.resizeTimer = false;

  function MySound() {
    this.onEnterFrame = bind(this.onEnterFrame, this);
    this.onLoaded = bind(this.onLoaded, this);
    this.onResize = bind(this.onResize, this);
    this.createCanvas();
    this.createManager();
    this.manager.load({
      bgm: {
        path: this.CONFIG.filename,
        loop: false,
        fftSize: this.CONFIG.size,
        gain: 'bgm',
        volume: $('#volume').val()
      }
    });
    $(window).resize(this.onResize);
  }

  MySound.prototype.onResize = function() {
    if (this.resizeTimer !== false) {
      clearTimeout(this.resizeTimer);
    }
    return this.resizeTimer = setTimeout((function(_this) {
      return function() {
        _this.widthArray = null;
        return _this.resizeTimer = false;
      };
    })(this), 100);
  };

  MySound.prototype.createCanvas = function() {
    var ctx;
    this.canvas = document.getElementById('canvas');
    this.canvas.width = $(window).width();
    this.canvas.height = $(window).height();
    ctx = this.getCanvasContext();
    return this.fillRect(0, 0, null, null, '#000000');
  };

  MySound.prototype.createManager = function() {
    return this.manager = new AudioManager({
      fps: this.CONFIG.fps,
      fftSize: this.CONFIG.fftSize,
      autoLoop: true,
      onLoaded: (function(_this) {
        return function() {
          return _this.onLoaded();
        };
      })(this),
      onEnterFrame: (function(_this) {
        return function() {
          return _this.onEnterFrame();
        };
      })(this)
    }).init();
  };

  MySound.prototype.onLoaded = function() {
    return this.isLoaded = true;
  };

  MySound.prototype.onEnterFrame = function() {
    var dat, h, i, j, myHeight, ref, results, w, widthArray, widthCount;
    if (!this.isLoaded) {
      return;
    }
    if (!this.isReady) {
      this.isReady = true;
      this.setVolume($('#volume').val());
      setTimeout((function(_this) {
        return function() {
          _this.startTime = +new Date();
          _this.isPlaying = true;
          return _this.manager.play('bgm');
        };
      })(this), this.CONFIG.startSec * 1000);
      return;
    }
    if (!this.isPlaying) {
      return;
    }
    this.putLyric();
    dat = this.manager.analysers.bgm.getByteFrequencyData();
    this.canvas.width = $(window).width();
    this.canvas.height = $(window).height();
    w = canvas.width;
    h = canvas.height;
    this.fillRect(0, 0, null, null, '#000000');
    widthArray = this.getWidthArray(dat.length, w);
    widthCount = 0;
    results = [];
    for (i = j = 0, ref = dat.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      myHeight = h * dat[i] / 255;
      this.fillRect(widthCount, h - myHeight, widthArray[i], myHeight, '#ffffff');
      results.push(widthCount += widthArray[i]);
    }
    return results;
  };

  MySound.prototype.fillRect = function(x, y, w, h, color) {
    var ctx;
    if (w === null) {
      w = this.canvas.width;
    }
    if (h === null) {
      h = this.canvas.height;
    }
    ctx = this.getCanvasContext();
    ctx.strokeStyle = color;
    ctx.fillStyle = color;
    return ctx.fillRect(x, y, w, h);
  };

  MySound.prototype.getCanvasContext = function() {
    return this.canvas.getContext('2d');
  };

  MySound.prototype.getWidthArray = function(noteCount, canvasWidth) {
    var baseW, i, j, k, l, plus1, ref, ref1, ref2, ref3, res, restW, shuffle;
    if (this.widthArray !== null) {
      return this.widthArray;
    }
    baseW = Math.floor(canvasWidth / noteCount);
    restW = canvasWidth - baseW * noteCount;
    plus1 = [];
    for (i = j = 0, ref = restW; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      plus1.push(1);
    }
    for (i = k = ref1 = restW, ref2 = canvasWidth; ref1 <= ref2 ? k < ref2 : k > ref2; i = ref1 <= ref2 ? ++k : --k) {
      plus1.push(0);
    }
    shuffle = function(array) {
      var n, ref3;
      n = array.length;
      while (n) {
        i = Math.floor(Math.random() * n--);
        ref3 = [array[i], array[n]], array[n] = ref3[0], array[i] = ref3[1];
      }
      return array;
    };
    plus1 = shuffle(plus1);
    res = [];
    for (i = l = 0, ref3 = canvasWidth; 0 <= ref3 ? l < ref3 : l > ref3; i = 0 <= ref3 ? ++l : --l) {
      res.push(baseW + plus1[i]);
    }
    return this.widthArray = res;
  };

  MySound.prototype.putLyric = function() {
    var lyric, lyricSpan, nowTime, ref, time;
    if (window.LYRICS.length === 0) {
      return;
    }
    ref = window.LYRICS[0], time = ref[0], lyric = ref[1];
    nowTime = +new Date();
    if (nowTime - this.startTime > time) {
      window.LYRICS.shift();
      lyricSpan = $('<div>').addClass('lyric').html(lyric.replace(/\s/g, '&nbsp;'));
      return lyricSpan.appendTo("#lyrics").hide().fadeIn(1000);
    }
  };

  MySound.prototype.setVolume = function(volume) {
    return this.manager.setVolume('bgm', volume);
  };

  return MySound;

})();
